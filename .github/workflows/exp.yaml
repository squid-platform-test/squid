name: Experiments

on:
  workflow_dispatch:
    inputs:
      arm:
        description: 'Test on ARM'
        required: false
        default: 'true'
        type: boolean
      arm64:
        description: 'Test on ARM64'
        required: false
        default: 'true'
        type: boolean
      i386:
        description: 'Test on i386'
        required: false
        default: 'true'
        type: boolean
      ppc64le:
        description: 'Test on ppc64le'
        required: false
        default: 'true'
        type: boolean
      riscv64:
        description: 'Test on riscv64'
        required: false
        default: 'true'
        type: boolean
      amd64:
        description: 'Test on amd64'
        required: false
        default: 'true'
        type: boolean
      freebsd:
        description: 'Test on FreeBSD/amd64'
        required: false
        default: 'true'
        type: boolean

  # schedule:
  # - cron: "10 3 12 * *" # earlier than multi-platform
#  push:
#    branches: [ github-actions-multiplatform ]

env:
  DOCKER_BUILDFARM_REPO: docker.io/squidcache/buildfarm
  DOCKER_BUILDFARM_TAG: latest
  pjobs: -j`nproc`
  COMPILER_MATRIX_JSON: '[ { "CC": \"gcc\", "CXX": \"g++\" },  { "CC": \"clang\", "CXX": \"clang++\" }]'
  LAYER_MATRIX_JSON: '[ { "name": \"layer-00-default\", "nick": \"default\" }, { "name": \"layer-01-minimal\", "nick": \"minimal\" }, { "name": \"layer-02-maximus\", "nick": \"maximus\" } ]'

concurrency:
  # Cancel ongoing tests in case of push to  branch
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  gen-matrix:
    runs-on: ubuntu-24.04
    outputs:
      exclusion: ${{ steps.exclusion.outputs.exclusion }}
      os:  ${{ steps.exclusion.outputs.os }}
      compiler: ${{ steps.exclusion.outputs.compiler }}
      layer: ${{ steps.exclusion.outputs.layer }}
    steps:
      - name: Check out sources
        uses: actions/checkout@v4
        with:
          repository: kinkie/dockerfiles
      - name: Define exclusion list
        id: exclusion
        run: |
          printf "exclusion=" >> "$GITHUB_OUTPUT"
          make json-exclude-list >> "$GITHUB_OUTPUT"
          printf "os=" >> "$GITHUB_OUTPUT"
          make targets | sed 's/^- /\\"/;s/$/\\", /' | xargs echo | sed 's/^/\[ /;s/,$/\ ]/' >> "$GITHUB_OUTPUT"
          echo "compiler=${{ env.COMPILER_MATRIX_JSON }}" >> "$GITHUB_OUTPUT"
          echo "layer=${{ env.LAYER_MATRIX_JSON }}" >> "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"

# job id must be same as platform and conditional.
# platforms are riscv64, ppc64le, arm64, arm, i386, amd64
  riscv64:
    if: ${{ github.event.inputs.riscv64 == 'true' }}
    needs: gen-matrix

    strategy:
      fail-fast: false
      matrix:
        platform: [riscv64]
        compiler: ${{ fromJSON(needs.gen-matrix.outputs.compiler) }}
        layer: ${{ fromJSON(needs.gen-matrix.outputs.layer) }}
        os: ${{ fromJSON(needs.gen-matrix.outputs.os) }}
        exclude:  ${{ fromJSON(needs.gen-matrix.outputs.exclusion) }}
    runs-on: ${{ matrix.platform == 'arm' || matrix.platform == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-22.04' }}
    name: ${{ matrix.platform }}-${{ matrix.os }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
    env:
      CC: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' && format('ccache {0}', matrix.compiler.CC) || matrix.compiler.CC }}
      CXX: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' && format('ccache {0}', matrix.compiler.CXX) || matrix.compiler.CXX }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'linux/amd64,linux/386,linux/arm64,linux/arm/v7,linux/ppc64le,linux/riscv64'
          cache-image: false
      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          repository: squid-cache/squid
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2.19
        if: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' }}
        with:
          verbose: 2 # default 0
          key: ${{matrix.platform}}-${{ matrix.os }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
      - name: Setup config.cache
        uses: actions/cache@v4
        with:
          key: config-cache-${{matrix.platform}}-${{ matrix.os }}-${{ matrix.compiler.CC }}
          path: config.cache
      - name: Run test-builds
        id: test-builds
        run: |
          if docker info >/dev/null 2>&1; then runtime=docker; else runtime=podman; fi
          $runtime run --rm -v $HOME:$HOME -v $PWD:$PWD -w $PWD -u $UID  \
            -e CC -e CXX -e CCACHE_DISABLE \
            --platform linux/${{ matrix.platform == 'arm' && 'arm/v7' || matrix.platform  }} \
            ${{ env.DOCKER_BUILDFARM_REPO }}-${{ matrix.os }}:${{ env.DOCKER_BUILDFARM_TAG }} \
            bash -c "\
              ccache --set-config=cache_dir=\$PWD/.ccache \
                --set-config=max_size=200M \
                --set-config=compression=false \
                --set-config=hard_link=true; \
              ccache -p; \
              ./test-builds.sh --aggressively-use-config-cache --config-cache-file \$PWD/config.cache --verbose ${{ matrix.layer.name }}; \
            "
      - name: Publish build logs
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
          path: |
            btlayer-*.log
            */config.log
  ppc64le:
    if: ${{ github.event.inputs.ppc64le == 'true' }}
    needs: gen-matrix
    strategy:
      fail-fast: false
      matrix:
        platform: [ppc64le]
        compiler: ${{ fromJSON(needs.gen-matrix.outputs.compiler) }}
        layer: ${{ fromJSON(needs.gen-matrix.outputs.layer) }}
        os: ${{ fromJSON(needs.gen-matrix.outputs.os) }}
        exclude:  ${{ fromJSON(needs.gen-matrix.outputs.exclusion) }}
    runs-on: ${{ matrix.platform == 'arm' || matrix.platform == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-22.04' }}
    name: ${{ matrix.platform }}-${{ matrix.os }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
    env:
      CC: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' && format('ccache {0}', matrix.compiler.CC) || matrix.compiler.CC }}
      CXX: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' && format('ccache {0}', matrix.compiler.CXX) || matrix.compiler.CXX }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'linux/amd64,linux/386,linux/arm64,linux/arm/v7,linux/ppc64le,linux/riscv64'
          cache-image: false
      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          repository: squid-cache/squid
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2.19
        if: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' }}
        with:
          verbose: 2 # default 0
          key: ${{matrix.platform}}-${{ matrix.os }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
      - name: Setup config.cache
        uses: actions/cache@v4
        with:
          key: config-cache-${{matrix.platform}}-${{ matrix.os }}-${{ matrix.compiler.CC }}
          path: config.cache
      - name: Run test-builds
        id: test-builds
        run: |
          if docker info >/dev/null 2>&1; then runtime=docker; else runtime=podman; fi
          $runtime run --rm -v $HOME:$HOME -v $PWD:$PWD -w $PWD -u $UID  \
            -e CC -e CXX -e CCACHE_DISABLE \
            --platform linux/${{ matrix.platform == 'arm' && 'arm/v7' || matrix.platform  }} \
            ${{ env.DOCKER_BUILDFARM_REPO }}-${{ matrix.os }}:${{ env.DOCKER_BUILDFARM_TAG }} \
            bash -c "\
              ccache --set-config=cache_dir=\$PWD/.ccache \
                --set-config=max_size=200M \
                --set-config=compression=false \
                --set-config=hard_link=true; \
              ccache -p; \
              ./test-builds.sh --aggressively-use-config-cache --config-cache-file \$PWD/config.cache --verbose ${{ matrix.layer.name }}; \
            "
      - name: Publish build logs
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
          path: |
            btlayer-*.log
            */config.log
  arm:
    if: ${{ github.event.inputs.arm == 'true' }}
    needs: gen-matrix
    strategy:
      fail-fast: false
      matrix:
        platform: [arm]
        compiler: ${{ fromJSON(needs.gen-matrix.outputs.compiler) }}
        layer: ${{ fromJSON(needs.gen-matrix.outputs.layer) }}
        os: ${{ fromJSON(needs.gen-matrix.outputs.os) }}
        exclude:  ${{ fromJSON(needs.gen-matrix.outputs.exclusion) }}
    runs-on: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && 'ubuntu-24.04' || 'ubuntu-22.04-arm' }}
    name: ${{ matrix.platform }}-${{ matrix.os }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
    env:
      CC: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' && format('ccache {0}', matrix.compiler.CC) || matrix.compiler.CC }}
      CXX: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' && format('ccache {0}', matrix.compiler.CXX) || matrix.compiler.CXX }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'linux/amd64,linux/386,linux/arm64,linux/arm/v7,linux/ppc64le,linux/riscv64'
          cache-image: false
      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          repository: squid-cache/squid
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2.19
        if: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' }}
        with:
          verbose: 2 # default 0
          key: ${{matrix.platform}}-${{ matrix.os }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
      - name: Setup config.cache
        uses: actions/cache@v4
        with:
          key: config-cache-${{matrix.platform}}-${{ matrix.os }}-${{ matrix.compiler.CC }}
          path: config.cache
      - name: Run test-builds
        id: test-builds
        run: |
          if docker info >/dev/null 2>&1; then runtime=docker; else runtime=podman; fi
          $runtime run --rm -v $HOME:$HOME -v $PWD:$PWD -w $PWD -u $UID  \
            -e CC -e CXX -e CCACHE_DISABLE \
            --platform linux/${{ matrix.platform == 'arm' && 'arm/v7' || matrix.platform  }} \
            ${{ env.DOCKER_BUILDFARM_REPO }}-${{ matrix.os }}:${{ env.DOCKER_BUILDFARM_TAG }} \
            bash -c "\
              ccache --set-config=cache_dir=\$PWD/.ccache \
                --set-config=max_size=200M \
                --set-config=compression=false \
                --set-config=hard_link=true; \
              ccache -p; \
              ./test-builds.sh --aggressively-use-config-cache --config-cache-file \$PWD/config.cache --verbose ${{ matrix.layer.name }}; \
            "
      - name: Publish build logs
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
          path: |
            btlayer-*.log
            */config.log
  arm64:
    if: ${{ github.event.inputs.arm64 == 'true' }}
    needs: gen-matrix
    strategy:
      fail-fast: false
      matrix:
        platform: [arm64]
        compiler: ${{ fromJSON(needs.gen-matrix.outputs.compiler) }}
        layer: ${{ fromJSON(needs.gen-matrix.outputs.layer) }}
        os: ${{ fromJSON(needs.gen-matrix.outputs.os) }}
        exclude:  ${{ fromJSON(needs.gen-matrix.outputs.exclusion) }}
    runs-on: ${{ matrix.platform == 'arm' || matrix.platform == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-22.04' }}
    name: ${{ matrix.platform }}-${{ matrix.os }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
    env:
      CC: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' && format('ccache {0}', matrix.compiler.CC) || matrix.compiler.CC }}
      CXX: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' && format('ccache {0}', matrix.compiler.CXX) || matrix.compiler.CXX }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'linux/amd64,linux/386,linux/arm64,linux/arm/v7,linux/ppc64le,linux/riscv64'
          cache-image: false
      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          repository: squid-cache/squid
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2.19
        if: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' }}
        with:
          verbose: 2 # default 0
          key: ${{matrix.platform}}-${{ matrix.os }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
      - name: Setup config.cache
        uses: actions/cache@v4
        with:
          key: config-cache-${{matrix.platform}}-${{ matrix.os }}-${{ matrix.compiler.CC }}
          path: config.cache
      - name: Run test-builds
        id: test-builds
        run: |
          if docker info >/dev/null 2>&1; then runtime=docker; else runtime=podman; fi
          $runtime run --rm -v $HOME:$HOME -v $PWD:$PWD -w $PWD -u $UID  \
            -e CC -e CXX -e CCACHE_DISABLE \
            --platform linux/${{ matrix.platform == 'arm' && 'arm/v7' || matrix.platform  }} \
            ${{ env.DOCKER_BUILDFARM_REPO }}-${{ matrix.os }}:${{ env.DOCKER_BUILDFARM_TAG }} \
            bash -c "\
              ccache --set-config=cache_dir=\$PWD/.ccache \
                --set-config=max_size=200M \
                --set-config=compression=false \
                --set-config=hard_link=true; \
              ccache -p; \
              ./test-builds.sh --aggressively-use-config-cache --config-cache-file \$PWD/config.cache --verbose ${{ matrix.layer.name }}; \
            "
      - name: Publish build logs
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
          path: |
            btlayer-*.log
            */config.log
  i386:
    if: ${{ github.event.inputs.i386 == 'true' }}
    needs: gen-matrix
    strategy:
      fail-fast: false
      matrix:
        platform: [i386]
        compiler: ${{ fromJSON(needs.gen-matrix.outputs.compiler) }}
        layer: ${{ fromJSON(needs.gen-matrix.outputs.layer) }}
        os: ${{ fromJSON(needs.gen-matrix.outputs.os) }}
        exclude:  ${{ fromJSON(needs.gen-matrix.outputs.exclusion) }}
    runs-on: ${{ matrix.platform == 'arm' || matrix.platform == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-22.04' }}
    name: ${{ matrix.platform }}-${{ matrix.os }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
    env:
      CC: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' && format('ccache {0}', matrix.compiler.CC) || matrix.compiler.CC }}
      CXX: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' && format('ccache {0}', matrix.compiler.CXX) || matrix.compiler.CXX }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'linux/amd64,linux/386,linux/arm64,linux/arm/v7,linux/ppc64le,linux/riscv64'
          cache-image: false
      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          repository: squid-cache/squid
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2.19
        if: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' }}
        with:
          verbose: 2 # default 0
          key: ${{matrix.platform}}-${{ matrix.os }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
      - name: Setup config.cache
        uses: actions/cache@v4
        with:
          key: config-cache-${{matrix.platform}}-${{ matrix.os }}-${{ matrix.compiler.CC }}
          path: config.cache
      - name: Run test-builds
        id: test-builds
        run: |
          if docker info >/dev/null 2>&1; then runtime=docker; else runtime=podman; fi
          $runtime run --rm -v $HOME:$HOME -v $PWD:$PWD -w $PWD -u $UID  \
            -e CC -e CXX -e CCACHE_DISABLE \
            --platform linux/${{ matrix.platform == 'arm' && 'arm/v7' || matrix.platform  }} \
            ${{ env.DOCKER_BUILDFARM_REPO }}-${{ matrix.os }}:${{ env.DOCKER_BUILDFARM_TAG }} \
            bash -c "\
              ccache --set-config=cache_dir=\$PWD/.ccache \
                --set-config=max_size=200M \
                --set-config=compression=false \
                --set-config=hard_link=true; \
              ccache -p; \
              ./test-builds.sh --aggressively-use-config-cache --config-cache-file \$PWD/config.cache --verbose ${{ matrix.layer.name }}; \
            "
      - name: Publish build logs
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
          path: |
            btlayer-*.log
            */config.log
  amd64:
    if: ${{ github.event.inputs.amd64 == 'true' }}
    needs: gen-matrix
    strategy:
      fail-fast: false
      matrix:
        platform: [amd64]
        compiler: ${{ fromJSON(needs.gen-matrix.outputs.compiler) }}
        layer: ${{ fromJSON(needs.gen-matrix.outputs.layer) }}
        os: ${{ fromJSON(needs.gen-matrix.outputs.os) }}
        exclude:  ${{ fromJSON(needs.gen-matrix.outputs.exclusion) }}
    runs-on: ${{ matrix.platform == 'arm' || matrix.platform == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-22.04' }}
    name: ${{ matrix.platform }}-${{ matrix.os }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
    env:
      CC: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' && format('ccache {0}', matrix.compiler.CC) || matrix.compiler.CC }}
      CXX: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' && format('ccache {0}', matrix.compiler.CXX) || matrix.compiler.CXX }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'linux/amd64,linux/386,linux/arm64,linux/arm/v7,linux/ppc64le,linux/riscv64'
          cache-image: false
      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          repository: squid-cache/squid
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2.19
        if: ${{ matrix.platform != 'arm' && matrix.platform != 'arm64' && matrix.platform != 'i386' && matrix.platform != 'amd64' }}
        with:
          verbose: 2 # default 0
          key: ${{matrix.platform}}-${{ matrix.os }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
      - name: Setup config.cache
        uses: actions/cache@v4
        with:
          key: config-cache-${{matrix.platform}}-${{ matrix.os }}-${{ matrix.compiler.CC }}
          path: config.cache
      - name: Run test-builds
        id: test-builds
        run: |
          if docker info >/dev/null 2>&1; then runtime=docker; else runtime=podman; fi
          $runtime run --rm -v $HOME:$HOME -v $PWD:$PWD -w $PWD -u $UID  \
            -e CC -e CXX -e CCACHE_DISABLE \
            --platform linux/${{ matrix.platform == 'arm' && 'arm/v7' || matrix.platform  }} \
            ${{ env.DOCKER_BUILDFARM_REPO }}-${{ matrix.os }}:${{ env.DOCKER_BUILDFARM_TAG }} \
            bash -c "\
              ccache --set-config=cache_dir=\$PWD/.ccache \
                --set-config=max_size=200M \
                --set-config=compression=false \
                --set-config=hard_link=true; \
              ccache -p; \
              ./test-builds.sh --aggressively-use-config-cache --config-cache-file \$PWD/config.cache --verbose ${{ matrix.layer.name }}; \
            "
      - name: Publish build logs
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.compiler.CC }}-${{ matrix.layer.nick }}
          path: |
            btlayer-*.log
            */config.log

  freebsd-amd64:
    if: ${{ github.event.inputs.freebsd == 'true' }}
    runs-on: ubuntu-24.04 # replicate for -arm

    strategy:
      fail-fast: false
      matrix:
        osversion:
          - "15.0"
          - "14.3"
          - "13.5"

    name: freebsd(${{ matrix.osversion }})

    steps:
      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          repository: squid-cache/squid
          path: squid

      - name: Run test-builds
        id: test-builds
        uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          release: ${{ matrix.osversion }}
          prepare: |
            export BATCH=yes
            which nproc >/dev/null && echo "MAKE_JOBS_NUMBER?=`nproc --all`" >>/etc/make.conf
            echo "OPTIONS_UNSET=CUPS DEBUG DOCS FONTCONFIG NLS X11" >>/etc/make.conf
            echo "WITHOUT_MODULES=sound ntfs linux" >> /etc/make.conf
            echo "WITHOUT_X11=yes" >>/etc/make.conf
            echo "NO_SENDMAIL=true" >>/etc/make.conf
            echo "IGNORE_OSVERSION=yes" >>/usr/local/etc/pkg.conf

            pkg install -y \
                git-tiny \
                portmaster \
                gmake
            git clone --depth 1 https://git.FreeBSD.org/ports.git /usr/ports
            portmaster -G -H --no-confirm --update-if-newer -t -P -d \
                devel/pkgconf \
                devel/autoconf \
                devel/autoconf-archive \
                devel/automake \
                devel/cppunit \
                devel/libltdl \
                devel/libtool \
                security/nettle \
                textproc/translate-toolkit

          run: |
            export MAKE=gmake
            cd squid
            ./test-builds.sh

      - name: Publish build logs
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: freebsd-${{ matrix.osversion }}
          path: squid/btlayer-*.log

